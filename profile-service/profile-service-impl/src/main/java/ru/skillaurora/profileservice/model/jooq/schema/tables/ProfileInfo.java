/*
 * This file is generated by jOOQ.
 */
package ru.skillaurora.profileservice.model.jooq.schema.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.skillaurora.profileservice.model.jooq.schema.Keys;
import ru.skillaurora.profileservice.model.jooq.schema.Public;
import ru.skillaurora.profileservice.model.jooq.schema.tables.records.ProfileInfoRecord;


/**
 * Таблица данных профиля пользователя
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfileInfo extends TableImpl<ProfileInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.profile_info</code>
     */
    public static final ProfileInfo PROFILE_INFO_ENTITY = new ProfileInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfileInfoRecord> getRecordType() {
        return ProfileInfoRecord.class;
    }

    /**
     * The column <code>public.profile_info.id</code>.
     */
    public final TableField<ProfileInfoRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_info.username</code>.
     */
    public final TableField<ProfileInfoRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.profile_info.real_name</code>.
     */
    public final TableField<ProfileInfoRecord, String> REAL_NAME = createField(DSL.name("real_name"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.profile_info.about_me</code>.
     */
    public final TableField<ProfileInfoRecord, String> ABOUT_ME = createField(DSL.name("about_me"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>public.profile_info.profile_picture</code>.
     */
    public final TableField<ProfileInfoRecord, String> PROFILE_PICTURE = createField(DSL.name("profile_picture"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.profile_info.country_id</code>.
     */
    public final TableField<ProfileInfoRecord, Short> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.profile_info.rating</code>.
     */
    public final TableField<ProfileInfoRecord, Long> RATING = createField(DSL.name("rating"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.profile_info.register_date</code>.
     */
    public final TableField<ProfileInfoRecord, LocalDate> REGISTER_DATE = createField(DSL.name("register_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>public.profile_info.account_status</code>.
     */
    public final TableField<ProfileInfoRecord, String> ACCOUNT_STATUS = createField(DSL.name("account_status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'ACTIVE'::character varying", SQLDataType.VARCHAR)), this, "");

    private ProfileInfo(Name alias, Table<ProfileInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProfileInfo(Name alias, Table<ProfileInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица данных профиля пользователя"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.profile_info</code> table reference
     */
    public ProfileInfo(String alias) {
        this(DSL.name(alias), PROFILE_INFO_ENTITY);
    }

    /**
     * Create an aliased <code>public.profile_info</code> table reference
     */
    public ProfileInfo(Name alias) {
        this(alias, PROFILE_INFO_ENTITY);
    }

    /**
     * Create a <code>public.profile_info</code> table reference
     */
    public ProfileInfo() {
        this(DSL.name("profile_info"), null);
    }

    public <O extends Record> ProfileInfo(Table<O> child, ForeignKey<O, ProfileInfoRecord> key) {
        super(child, key, PROFILE_INFO_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProfileInfoRecord> getPrimaryKey() {
        return Keys.PROFILE_INFO_PKEY;
    }

    @Override
    public List<UniqueKey<ProfileInfoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PROFILE_INFO_USERNAME_KEY);
    }

    @Override
    public List<ForeignKey<ProfileInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROFILE_INFO__PROFILE_INFO_COUNTRY_ID_FKEY);
    }

    private transient Country _country;

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.PROFILE_INFO__PROFILE_INFO_COUNTRY_ID_FKEY);

        return _country;
    }

    @Override
    public List<Check<ProfileInfoRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("profile_info_account_status_check"), "(((account_status)::text = ANY ((ARRAY['ACTIVE'::character varying, 'DELETED'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("profile_info_username_check"), "(((length((username)::text) > 2) AND (length((username)::text) < 33)))", true)
        );
    }

    @Override
    public ProfileInfo as(String alias) {
        return new ProfileInfo(DSL.name(alias), this);
    }

    @Override
    public ProfileInfo as(Name alias) {
        return new ProfileInfo(alias, this);
    }

    @Override
    public ProfileInfo as(Table<?> alias) {
        return new ProfileInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileInfo rename(String name) {
        return new ProfileInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileInfo rename(Name name) {
        return new ProfileInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileInfo rename(Table<?> name) {
        return new ProfileInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, String, String, String, String, Short, Long, LocalDate, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Short, ? super Long, ? super LocalDate, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Short, ? super Long, ? super LocalDate, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
