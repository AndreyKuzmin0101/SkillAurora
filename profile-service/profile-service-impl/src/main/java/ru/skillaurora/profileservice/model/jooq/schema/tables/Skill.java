/*
 * This file is generated by jOOQ.
 */
package ru.skillaurora.profileservice.model.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.skillaurora.profileservice.model.jooq.schema.Keys;
import ru.skillaurora.profileservice.model.jooq.schema.Public;
import ru.skillaurora.profileservice.model.jooq.schema.tables.records.SkillRecord;


/**
 * Таблица навыков пользователя
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Skill extends TableImpl<SkillRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.skill</code>
     */
    public static final Skill SKILL_ENTITY = new Skill();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillRecord> getRecordType() {
        return SkillRecord.class;
    }

    /**
     * The column <code>public.skill.user_id</code>.
     */
    public final TableField<SkillRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.skill.tag_id</code>.
     */
    public final TableField<SkillRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Skill(Name alias, Table<SkillRecord> aliased) {
        this(alias, aliased, null);
    }

    private Skill(Name alias, Table<SkillRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица навыков пользователя"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.skill</code> table reference
     */
    public Skill(String alias) {
        this(DSL.name(alias), SKILL_ENTITY);
    }

    /**
     * Create an aliased <code>public.skill</code> table reference
     */
    public Skill(Name alias) {
        this(alias, SKILL_ENTITY);
    }

    /**
     * Create a <code>public.skill</code> table reference
     */
    public Skill() {
        this(DSL.name("skill"), null);
    }

    public <O extends Record> Skill(Table<O> child, ForeignKey<O, SkillRecord> key) {
        super(child, key, SKILL_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<SkillRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SKILL_UNIQ);
    }

    @Override
    public List<ForeignKey<SkillRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SKILL__SKILL_USER_ID_FKEY);
    }

    private transient ProfileInfo _profileInfo;

    /**
     * Get the implicit join path to the <code>public.profile_info</code> table.
     */
    public ProfileInfo profileInfo() {
        if (_profileInfo == null)
            _profileInfo = new ProfileInfo(this, Keys.SKILL__SKILL_USER_ID_FKEY);

        return _profileInfo;
    }

    @Override
    public Skill as(String alias) {
        return new Skill(DSL.name(alias), this);
    }

    @Override
    public Skill as(Name alias) {
        return new Skill(alias, this);
    }

    @Override
    public Skill as(Table<?> alias) {
        return new Skill(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Skill rename(String name) {
        return new Skill(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Skill rename(Name name) {
        return new Skill(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Skill rename(Table<?> name) {
        return new Skill(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
